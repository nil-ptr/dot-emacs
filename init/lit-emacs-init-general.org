#+TITLE: Main Emacs Initialisation File
#+Author: Nils Gustafsson
#+OPTIONS: num:3 toc:nil

General/misc package setup. In other words, this is where I configure
and load packages that don't fit in any other obvious
category. Imported by [[file:~/.emacs.d/init.el][init.el]].

* Basic Initialisation

  Some basic things I need out of the way.

** Window and Buffer Keys

   Firstly, some window-related stuff. I need a function to split the
   frame into three side-by-side windows, because that's my preferred
   default layout.

   #+NAME: lit-emacs-my-split-to-3-windows
   #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
     (defun my-split-to-3-windows ()                                 ;(defNilguSplitwin)
       "Splits the current window until this frame has 3 and then balances them."
       (interactive)
       (let ((num (- 3 (count-windows))))
         (when (> num 0)
           (dotimes (i num) (split-window-right nil))
           (balance-windows))))
   #+END_SRC

   And here are my global keys for window/buffer movment:

   #+NAME: lit-emacs-init-window-keybinds
   #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
     ;; Window/buffer manipulation
     (bind-keys :map global-map
      ("H-<left>"    . windmove-left)
      ("H-<right>"   . windmove-right)
      ("H-<up>"      . windmove-up)
      ("H-<down>"    . windmove-down)
      ("C-H-<left>"  . buf-move-left)
      ("C-H-<right>" . buf-move-right)
      ("C-H-<up>"    . buf-move-up)
      ("C-H-<down>"  . buf-move-down)
      ("C-x C-M-s"   . my-split-to-3-windows)                         ;(splitwinBind)

      ;; Save, exit, and kill the server
      ("C-x C-M-c"   . save-buffers-kill-emacs)                  ;(savebuffkillemacs)

      ;; Better keybinding for dabbrev-expand, as "M-\" is awkward on a
      ;; nordic keyboard.
      ("H-:"         . dabbrev-expand)

      ;; Useful command for basic code formatting. Especially for
      ;; struct/record layouts, list/map literals and the like.
      ("C-c a"       . 'align-regexp))                             ;(alignregexpBind)

   #+END_SRC

   Two noteworthy lines above are line [[(splitwinBind)]], in which I make
   use of [[(defNilguSplitwin)][my-split-to-3-windows]], and line [[(savebuffkillemacs)]] which sets up a
   binding for killing the current client /and/ the server.

   Additionally, there's a binding for [[(alignregexpBind)][align-regexp]], which is a handy
   tool to have for quick ad-hoc code formatting. Can be combined with
   a prefix argument. for a more powerful version of the command.

   A further note: the "H" in the keybindings above refers to the
   "Hyper" key, which is what I've reassigned capslock to. Because who
   even uses capslock?

** Emacs Server

   Should be booted up if it isn't already. Unless we're in
   =noninteractive= mode.

   #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
     ;; Start the server after init, unless we're in batch mode or
     ;; something.
     (use-package server
       :unless  noninteractive
       :no-require t
       :hook (after-init . server-start))
   #+END_SRC

** =pdf-tools=

   Not exactly basic, but I'd like to get this out of the way early,
   and I'm not sure where else to put it.

   Note that when this package is updated, the pdf-tools backends
   will need to be rebuilt. This rebuilding process will cause a
   prompt to appear in emacs, which means it may be unwise to start
   emacs as a daemon immediately after updating that package. Since
   you might not see the prompt.

   #+NAME: lit-emacs-init-pdf-tools
   #+BEGIN_SRC emacs-lisp +n
     (use-package pdf-tools
       :defer t
       ;; Trick copied from the use-package README. This will load
       ;; pdf-tools just in time.
       :magic ("%PDF" . pdf-view-mode)
       :config (pdf-tools-install))
   #+END_SRC

** Misc Look And Feel

*** =powerline= and =encourage=

    A pair of straight forward ui packages.

    #+NAME: lit-emacs-init-powerline-setup
    #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
      ;; These don't do anything in non-interactive mode.
      (use-package powerline
        :defer t
        :hook (after-init . powerline-default-theme))
      ;; No real point in deferring this; it's tiny.
      (use-package encourage-mode
        :diminish)
    #+END_SRC



* Project Management

  Version control, project navigation, etc.

** =magit=

   The cleanest git interface I've yet to encounter.

   #+NAME: lit-emacs-init-magit-setup
   #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
     (use-package magit
       :bind ("H-g" . magit-status)
       :config
       (use-package magit-commit
         :config
         (use-package git-commit))

       (use-package magit-files
         :commands (global-magit-file-mode)
         :config
         (global-magit-file-mode)))
   #+END_SRC

** =projectile=

   The project management package.

   #+NAME: lit-emacs-init-projectile-setup
   #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
     (use-package projectile
       :defer 5 ;; Load unconditionally after 5 seconds
       :config (projectile-mode +1)
       :bind-keymap ("H-p" . projectile-command-map))               ;(projectileKeymap)
   #+END_SRC

   I'm defining how to access the ~projectile-mode-map~ [[(projectileKeymap)][here]] rather
   than any specific command, as that's the recommended way to set
   this up.




* Editing Functionality

  Packages related to code or text editing.

** General Editing Functionality

*** =company=

    Completion setup is fairly simplistic:

    #+NAME: lit-emacs-init-company-setup
    #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
      (use-package company
        :defer 2 ;; Load unconditionally after 2 sec
        :diminish company-mode
        :commands
        (company-abort
         company-complete-number
         global-company-mode)
        :bind (:map global-map
                    ("C-:" . company-complete))                ;(companyCompleteBind)
        :config
        ;; Taken from jweigley's dot-emacs repo.                        ;(jwRepoNote)

        ;; See http://oremacs.com/2017/12/27/company-numbers/
        (defun ora-company-number ()
          "Forward to `company-complete-number'.
        Unless the number is potentially part of the candidate.
        In that case, insert the number."
          (interactive)
          (let* ((k (this-command-keys))
                 (re (concat "^" company-prefix k)))
            (if (cl-find-if (lambda (s) (string-match re s))
                            company-candidates)
                (self-insert-command 1)
              (company-complete-number (string-to-number k)))))

        (let ((map company-active-map))
          (mapc
           (lambda (x)
             (define-key map (format "%d" x) 'ora-company-number))
           (number-sequence 0 9))
          (define-key map " " (lambda ()
                                (interactive)
                                (company-abort)
                                (self-insert-command 1))))
        (global-company-mode 1))

    #+END_SRC

    Some notes:

    - [[(companyCompleteBind)][This]] is not the only place where I make bindings
      related to the ~company-mode-map~.

    - All of the [[(jwRepoNote)][config code]] above was taken from John Weigley's
      [[https://github.com/jwiegley/dot-emacs][dot-emacs]] repository. From his =init.el= file specifically.

    - Which modes are affected by the =global-company-mode= is
      determined by a =custom= variable.


*** =avy= editing/navigation

    #+NAME: lit-emacs-init-avy-prog-mode-setup
    #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
      ;; Fast navigation and 'zap'-ing to specific nearby chars, with a
      ;; keyboard based "disambiguation" mode.
      (use-package avy                                                     ;(avyMode)
        :defer t
        :config (avy-setup-default)
        :bind (("C-'" . avy-goto-char-2)
               ("C-*" . avy-goto-subword-1)
               ("H-'" . avy-goto-char-in-line)))
      (use-package avy-zap
        :defer t
        :bind (("M-z" . avy-zap-up-to-char)
               ("M-Z" . avy-zap-to-char)))
    #+END_SRC


    For info on what [[(avyMode)][=avy=]] does exactly, see the built-in
    documentation or https://github.com/abo-abo/avy.



*** =flyspell= and =flycheck=

    #+NAME: lit-emacs-init-flyspell-flycheck-setup
    #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
      ;; flyspell
      (use-package flyspell
        :diminish flyspell-prog-mode                            ;(flyspellProgMode)
        :diminish flyspell-mode
        :hook ((prog-mode . flyspell-prog-mode)
               (text-mode . flyspell-mode)))

      ;; flycheck
      (use-package flycheck
        :hook ((prog-mode     . flycheck-mode)
               (flycheck-mode . flycheck-cask-setup)))

      ;; pos-tip support for displaying flycheck errors
      (use-package pos-tip
        :defer t)
      (use-package flycheck-pos-tip
        :diminish
        :after (flycheck)
        :hook (flycheck-mode . flycheck-pos-tip-mode))

    #+END_SRC

    Note that ~flyspell-mode~ for /programming/ mode is a [[(flyspellProgMode)][different]]
    mode than the /text/ oriented one.





** Code Editing Functionality

   Firstly some general stuff:

   #+NAME: lit-emacs-init-delims-wc-etc-prog-mode-setup
   #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
     (use-package rainbow-delimiters
       ;; Toggle rainbows
       :bind ("H-c"     . rainbow-delimiters-mode)
       :hook (prog-mode . rainbow-delimiters-mode)
       :diminish)

     (use-package smartparens
       :hook (prog-mode . smartparens-mode)
       :diminish)

     (use-package column-enforce-mode
       :hook (prog-mode markdown-mode)
       :diminish)

     (use-package highlight-indentation
       :hook ((prog-mode . highlight-indentation-mode)
              (prog-mode . highlight-indentation-current-column-mode)
              (org-mode  . highlight-indentation-mode))
       :diminish highlight-indentation-mode
       :diminish highlight-indentation-current-column-mode)

     (use-package whitespace-cleanup-mode
       :hook (prog-mode org-mode)
       :diminish)
   #+END_SRC

   Delimiter and whitespace handling. Not all that exiting. And
   column-enforce also applies to =text-mode=.

*** Lang Major Modes

    Initialisation for specific programming language major modes. Many
    don't need anything specific, but a handful do.

    - Haskell

      Due to a key map conflict with ~haskell-interactive-mode~, I
      need to unset some bindings when ~haskell-mode~ loads.

      #+NAME: lit-emacs-init-haskell-mode
      #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
        (use-package haskell-mode
          :defer t
          :config
          (mapc (lambda (x) (define-key haskell-mode-map (kbd x) nil))
                '("C-c C-i"
                  "C-c C-l"
                  "C-c C-t"
                  "C-c C-b"
                  "C-c C-v")))

        (use-package flycheck-haskell
          :after (flycheck haskell-mode)
          :hook (haskell-mode . flycheck-haskell-setup))

      #+END_SRC


** Text Editing Functionality

   Not much text specific going on in this file. Just =pandoc=,
   basically.

   #+NAME: lit-emacs-init-pandoc-mode-setup
   #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
     (use-package markdown-mode
       :config (use-package pandoc-mode
                 :commands pandoc-load-default-settings
                 :hook markdown-mode
                 :config (pandoc-load-default-settings)))
   #+END_SRC


* Changelog

  This is a local record of changes made to this file. May be inaccurate. I'm only human.


** Changes [2018-10-18 tor]

   - Removed the hook setting ~magit-last-seen-setup-instructions~ logic.

** Changes [2018-10-19 fre]

   - Substantial rewrites. Will add more commentary when I've had a look at the diff in git.
