#+TITLE: Linum Setup
#+Author: Nils Gustafsson
#+OPTIONS: num:3 toc:nil
#+TAGS: { export(e) noexport(n) } { out_of_seq_keybind(O) actual_keybind_loc(A) }
#+PROPERTY: header-args :noweb no-export :tangle yes :exports code :comments link :padline true

This is the file responsible for setting up line numbers correctly, as
part of my init routine. This is a literate =emacs lisp= file, written
in =org-mode=.


* Imports and Prerequisites

  - I want lexical scoping here.

    #+NAME: lit-emacs-linum-header
    #+BEGIN_SRC emacs-lisp -n -r -l ";(%s)" :comments no
    ;;; lit-emacs-init-general.el -*- lexical-binding: t -*-
    ;;; Commentary:
    ;;;
    ;;; Generated from lit-emacs-init-general.org
    #+END_SRC

  - I need =my-init-macros= at compile time.

    #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
      (eval-when-compile
        (require 'my-init-macros))
    #+END_SRC

  - This file needs access to the full =use-package= package when
    compiled.

    #+NAME: lit-emacs-linum-imports
    #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
      (eval-when-compile
        (require 'use-package))
    #+END_SRC


** Recompilation Code                                              :noexport:

   This code block may be evaluated to recompile and load this
   file. Useful to skip having to restart =emacs= to trigger
   recompilation.

   Note: This file currently has =:comments link= set. Take care if
   =org-id-link-to-org-use-id= is set to ~t~.

   #+BEGIN_SRC emacs-lisp :tangle no :exports none :noweb no :results value silent
     (let* ((this-file-base (expand-file-name "init/lit-emacs-init-linum"
                                              user-emacs-directory))
            (this-file-org (concat this-file-base ".org"))
            (this-file-el  (concat this-file-base ".el"))
            (tangled-file
             (car
              (org-babel-tangle-file this-file-org
                                     this-file-el
                                     "emacs-lisp"))))
       (and (byte-compile-file tangled-file t)
            (format "Tangled, compiled, and loaded %s"
             tangled-file)))
   #+END_SRC

* Emacs version

  Native line numbering support was added in =emacs= 26.1, thus we
  only want the =linum= related code in this file if we're on a
  version less than that.


  #+NAME: lit-emacs-init-emacs-version-guard
  #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)" :tangle yes :noweb yes
    ;; Use linum if emacs doesn't have line-numbers yet.
    (eval-when-compile
      (defmacro lit-init-linum-mk-body()
        (if (version<  emacs-version "26.1")
            `(progn
              <<linum-pre-26.1>>                                       ;(preEmacs26)
              )
          `(progn
             <<line-numbers-post-26.1>>))))                          ;(postEmacs26)
    (lit-init-linum-mk-body)

  #+END_SRC

  For the body of [[(preEmacs26)][line (preEmacs26)]] see section [[The Solution][The Solution]]
  below. The body of [[(postEmacs26)][line (postEmacs26)]] is in section [[*Display Line
  Numbers Mode]] below.

* Display Line Numbers Mode                                       :post_v_26:
  :PROPERTIES:
  :header-args: :tangle no
  :END:


  Activate =global-display-line-numbers=.

  #+NAME: lit-emacs-init-display-line-numbers-mode
  #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)" :noweb-ref line-numbers-post-26.1 :noweb yes
    (use-package display-line-numbers-mode
      :no-require t ; This is a built-in.
      :demand t     ; Don't wait, it's a built-in.
      :commands (global-display-line-numbers-mode)
      ;; Makes the byte-compiler happy
      :functions (my-display-line-numbers--turn-on-advice)
      :preface
    <<display-line-numbers-new-defcustoms>>
      :config
    <<display-line-numbers--turn-on-advice>>
      (global-display-line-numbers-mode 1))
  #+END_SRC


** Global mode customization

   WRITTEN [2019-05-11 lör 14:11]

   This was more or less copied from section [[*The Solution]] below.

   #+NAME: lit-emacs-init-global-display-line-number-defcustoms
   #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)" :noweb-ref display-line-numbers-new-defcustoms
     (defcustom global-display-line-numbers-mode-modes-blacklist
       '(eshell-mode
         wl-summary-mode
         compilation-mode
         org-mode
         text-mode
         dired-mode
         doc-view-mode
         pdf-view-mode
         haskell-interactive-mode)
       "List of major modes where `global-display-line-numbers-mode'
     shouldn't apply."
       :type '(repeat (sexp :tag "Major mode"))
       :tag "Global Display Line Numbers Mode Major Mode Blacklist"
       :group 'display-line-numbers-mode)

     (defcustom global-display-line-number-mode-ignore-starred-buffers 't
       "If non-nil, `global-display-line-numbers-mode' will ignore
     starred buffers such as *Gnu Emacs*."
       :type 'boolean
       :tag "Global Display Line Numbers Mode Ignore Starred Buffers"
       :group 'display-line-numbers-mode)
   #+END_SRC

   The advice for the =turn-on= function in this case is slightly
   different. See line [[(turnOnAdviceCondition)]], in the block below.

   Main reason for the difference is because I bothered to spend some
   time actually trying to make sense of the possible ~where~
   arguments to =advice-add=.

   #+NAME: lit-emacs-init-global-display-line-number-turn-on-advice
   #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)" :noweb-ref display-line-numbers--turn-on-advice
     (defun my-display-line-numbers--turn-on-advice ()
       "Advice for `display-line-numbers--turn-on'.

     If this function returns nil, `display-line-numbers--turn-on'
     should not be called.

     Adds extra checks based on
     `global-display-line-numbers-mode-modes-blacklist' and
     `global-display-line-numbers-mode-ignore-starred-buffers'."

       (or (member major-mode
                   global-display-line-numbers-mode-modes-blacklist)
           (and global-display-line-number-mode-ignore-starred-buffers
                (string-match "*" (buffer-name)))))

     (init-say "Adding advice to display-line-numbers--turn-on..")
     (advice-add 'display-line-numbers--turn-on
                 :before-until                              ;(turnOnAdviceCondition)
                 #'my-display-line-numbers--turn-on-advice)
   #+END_SRC





* Linum                                                            :pre_v_26:
  :PROPERTIES:
  :header-args: :tangle no
  :END:


  Line numbering minor mode. See the relevant emacs documentation for details.

** The Problem

   WRITTEN: [2018-10-17 ons 12:47]

   I'd like to use ~global-linum-mode~, but it interacts badly with a
   number of different other modes and buffers:

   - Interactive buffers, such as repl buffers and compilation buffers
     may end up becoming exceedingly long. This eventually causes
     =linum= to start to consume unacceptable amounts of system
     resources.

   - Certain other "starred" buffers such as =*Messages*= also exhibit
     this problem.

   - =linum= combined with =pdf-view-mode= exhibits similar problems,
     albeit for different reasons. I forget what those reasons are
     exactly; it's been a while since I looked this up. In any case
     trying to add line numbers to a pdf buffer is a) useless, and b)
     causes *massive* slowdowns.

   And in addition, there are a few modes where it behaves just fine,
   but where I'd like it turned off anyway.

   Sadly there is no built in way to blacklist or exclude certain
   modes from being affected by ~global-linum-mode~. And I don't want
   to have to whitelist every single mode that /does/ work with
   ~global-linum-mode~. Which is also not a thing that's supported in
   the =linum= customize category.

** The Solution

   WRITTEN: [2018-10-17 ons 12:51]

   Since neither whitelisting, nor blacklisting is avaliable directly,
   we'll have implement this functionality manually. The code here is
   based in part on code I found at a now long since dissappeared url[fn:deadlink].

   The idea here is to add the [[(linumDefCustom)][missing customization]] interface
   manually during init, and to then *override* a function called
   =linum-on=.

   [2019-01-12 lör 16:23]

   This solution has become somewhat unreliable after I rewrote some
   of the logic that loads this file. However, I've amended it by also
   overriding the definition of =global-linum-mode=. Seems to work
   again. Hopefully I can stop working on this work-around when I get
   around to upgrading emacs.

   #+NAME: lit-emacs-init-linum-defcustoms
   #+BEGIN_SRC emacs-lisp -n -r -l ";(%s)" :noweb-ref linum-pre-26.1 :noweb yes
     (use-package linum
       :defer t
       :ensure t
       :commands (global-linum-mode linum-on)

       ;; Add new customisation options
       :preface
       <<linum-new-defcustoms>>                                     ;(linumDefCustom)

       :config
       ;; Redefine linum-on to respect our new custom
       ;; variables.
       (message "%s %s"
                "from lit-emacs-init-linum:"
                "overriding definition of 'linum-on'...")
       <<linum-on-redef>>                                              ;(linumRedef)

       :hook (after-init . (lambda () (global-linum-mode 1))))
   #+END_SRC

   The new customisation definitions look like this:

   #+NAME: lit-emacs-init-linum-defcustoms
   #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)" :noweb-ref linum-new-defcustoms

     (defcustom global-linum-disabled-modes-list
       '(eshell-mode
         wl-summary-mode
         compilation-mode
         org-mode
         text-mode
         dired-mode
         doc-view-mode
         pdf-view-mode
         haskell-interactive-mode)
       "List of major modes where `global-linum-mode' shouldn't apply."
       :type '(repeat (sexp :tag "Major mode"))
       :tag "Global Linum Mode Major Mode Blacklist"
       :group 'linum)

     (defcustom global-linum-ignore-starred-buffers 't
       "If non-nil, `global-linum-mode' will ignore starred buffers such as *Gnu Emacs*."
       :type 'boolean
       :tag "Global Linum Mode Ignore Starred Buffers"
       :group 'linum)
   #+END_SRC

   And this is the overriding definition of =linum-on=:

   #+NAME: lit-emacs-init-linum-on-redef
   #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)" :noweb-ref linum-on-redef
     (defun my-linum-on ()
       "Activate line-numbers in the current buffer, unless this
     is ruled out by `global-linum-disabled-modes-list'
     `global-linum-ignore-starred-buffers'.

     This function overrides the default definition exported in
     linum.el"
       (unless (or (minibufferp)
                   (member major-mode global-linum-disabled-modes-list)
                   (and global-linum-ignore-starred-buffers
                        (string-match "*" (buffer-name))
                        ))
         (linum-mode 1)))
     (define-globalized-minor-mode my-global-linum-mode linum-mode my-linum-on)

     (advice-add 'linum-on
                 :override
                 #'my-linum-on)

     (advice-add 'global-linum-mode
                 :override
                 #'my-global-linum-mode)

   #+END_SRC


   And that's that. Not too hard to fix, thankfully.

   WRITTEN: [2019-05-08 ons 23:13]

   This code continues to spew out warnings every time it is
   recompiled. It still seems to function just fine, but I'm becoming
   increasingly worried about the dangers of bit-rot here.


[fn:deadlink] The (now dead) link is:
=https://github.com/Khady/emacs.d/blob/master/setup-linum.el=


* Future Work
  :PROPERTIES:
  :header-args: :noweb no :tangle no
  :END:


** TODO Preserve line numbers when narrowing

   May be able to do something with this code from a SO answer I saw:

   #+BEGIN_SRC emacs-lisp :tangle no

     (require 'linum)

     (defvar my-linum-base-line nil)
     (defvar my-linum-format nil)

     (add-hook 'linum-before-numbering-hook
               (lambda ()
                 (save-excursion
                   (save-restriction
                     (goto-char (point-min))
                     (widen)
                     (setq my-linum-base-line (count-lines 1 (point)))
                     (setq my-linum-format
                           (format "%%%dd"
                                   (length
                                    (int-to-string
                                     (+ my-linum-base-line
                                        (count-lines (point)
                                                     (point-max)))))))))))

     (setq-default linum-format
                   (lambda (line)
                     (format my-linum-format
                             (+ line my-linum-base-line))))

   #+END_SRC

   Got it [[https://emacs.stackexchange.com/questions/24833/preserve-original-line-numbering-for-a-narrowed-region][here]]. The link was valid [2018-10-25 tor 16:45].


   Or maybe not.. It would be confusing, if I ever wanted to use
   =goto-line= in a narrowed buffer.
