#+TITLE: Org Setup
#+Author: Nils Gustafsson
#+OPTIONS: num:3 toc:nil

This file responsible for initialising my personal =org= setup, and
should be imported from [[file:~/.emacs.d/init.el][init.el]]. This is a literate =emacs lisp= file,
written in =org-mode=.


* Org

  WRITTEN: [2018-10-18 tor 13:16]

  There's little to do here, besides importing org just to define some
  symbols. The one extra package I really want is a look and feel
  thing called =org-bullets=.

  #+NAME: lit-emacs-init-org-bullets-setup
  #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
    ;; I'm doing this exclusively to stop the byte-compiler from
    ;; complaining about missing symbols. Org is already loaded (lazily)
    ;; by the time we get to this stage of the initialisation, since
    ;; that's introduced in init.el itself.
    (eval-when-compile
      (use-package org
        :defer t
        :defines (org-agenda-mode-map)
        :functions (org-agenda-show)))

    ;; So I won't have to keep staring at rows of asterisks.  Plus it
    ;; makes deeply nested trees (slightly) easier to deal with.
    (use-package org-bullets
      :defer t
      :commands org-bullets-mode
      :after org
      :hook (org-mode . (lambda () (org-bullets-mode 1))))

  #+END_SRC




** Functions

   WRITTEN: [2018-10-17 ons 19:00]

   There are a couple of functions that need defining here, mainly for
   =org-agenda= use.

*** My agenda setup

    Firstly, I need a pair of helpers, [[(delBeforeShow)][one]] to clear the frame before
    opening the agenda, and [[(indirectHack)][one]] to give me a key binding for closing
    indirect buffers opened via an agenda view.

    #+NAME: lit-emacs-init-agenda-split-helpers-def
    #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"

      ;; Helper function for my-agenda-split-settings, defined further
      ;; down. Clears the frame of other buffers/windows before opening the
      ;; agenda in the current one.
      (defun my-agenda-del-before-show (&optional fe)             ;(delBeforeShow)
        "Like 'agenda-mode-show' but delete other buffers first."
        (interactive)
        (delete-other-windows)
        (org-agenda-show fe))

      ;; Tiny function to help close an indirect buffer opened from an
      ;; agenda buffer. Used in my-agenda-split-settings below.
      (defun my-agenda-del-indirect-hack ()                        ;(indirectHack)
        "Delete the window below, if it exists."
        (interactive)
        (when (with-demoted-errors "No valid buffer below! (Exact error: %s)"
                (windmove-down))
          (delete-window)))

    #+END_SRC

    Armed with those, I can define my custom ~agenda-show~ settings
    hook:

    #+NAME: lig-emacs-init-agenda-agenda-split-settings-def
    #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"

      ;; Adjust some agenda settings on the fly, when the mode is loaded.
      (defun my-agenda-split-settings ()
        "Set buffer-local split thresholds in agenda mode.
      Specifically: set 'split-height-threshold' to nil and
      'split-width-threshold' to 5.  Also redefines the goto key and
      switch to key."
        (interactive)
        (setq-local split-height-threshold nil)
        (setq-local split-width-threshold 5)
        (mapc (lambda (p)
               (define-key org-agenda-mode-map (kbd (car p)) (cdr p)))
              '(("RET"          . my-agenda-del-before-show)
                ("<return>"     . my-agenda-del-before-show)
                ("C-RET"        . org-agenda-goto)
                ("<C-return>"   . org-agenda-goto)
                ("C-M-RET"      . org-agenda-switch-to)
                ("<C-M-return>" . org-agenda-switch-to)
                ("<tab>"        . org-agenda-tree-to-indirect-buffer)
                ("<backtab>"    . my-agenda-del-indirect-hack))))

      ;; Add the above to the agenda-mode-hook.
      (add-hook 'org-agenda-mode-hook 'my-agenda-split-settings)

     #+END_SRC


*** Agenda view opening functions

    Some functions which mimic the agenda key bindings connected to
    two agenda views I make frequent use of.

    #+NAME: lit-emacs-init-agenda-view-open-functions-def
    #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"

      ;; Open the views in question

      (defun my-agenda-custom-view-general (&optional arg)
        "Show the ;; view, passing along optional ARG."
        (interactive "P")
        (org-agenda arg ";;"))

      (defun my-agenda-custom-view-work (&optional arg)
        "Show the ;W view, passing along optional ARG."
        (interactive "P")
        (org-agenda arg ";W"))


      ;; Open and bury

      (defun my-agenda-custom-view-general-and-bury (&optional arg)
        "Show the ;; view, passing along optional ARG, then bury the buffer."
        (interactive "P")
        (org-agenda arg ";;")
        (bury-buffer))


      (defun my-agenda-custom-view-work-and-bury (&optional arg)
        "Show the ;W view, passing along optional ARG, then bury the buffer."
        (interactive "P")
        (org-agenda arg ";W")
        (bury-buffer))

    #+END_SRC


*** Idle timers

    I like having =emacs= construct my agenda buffers for me, if I'm
    ever idle (in emacs) for significant periods of time.

    #+NAME: lit-emacs-init-agenda-timers-setup
    #+BEGIN_SRC emacs-lisp +n -r -l ";(%s)"
      ;; Show work or general agenda depending on current date/time.
      (defun my-show-agenda-special (&optional arg)
        "Show the work or general agenda depending on the weekday and
      current time, passing ARG along as appropriate."
        (deactivate-mark)
        (let ((dayOfWeek (string-to-number (format-time-string "%u")))
              (timeOfDay (string-to-number (format-time-string "%H"))))
          (if (or (= dayOfWeek 6)
                  (= dayOfWeek 7)
                  (< timeOfDay 7)
                  (> timeOfDay 17))
              (my-agenda-custom-view-general arg)
            (my-agenda-custom-view-work arg)))
        (goto-char (point-min)))

      ;; Show the work or general (depending on the day/time)
      ;; agenda after 60s.
      (run-with-idle-timer 60 t #'my-show-agenda-special)



      ;; Update visible agendas every two minutes while idle.
      (defvar my-agenda-idle-update-resume-timer nil
        "Timer for `my-agenda-idle-maybe-update' to reschedule itself, or nil.")

      (defun my-agenda-idle-update ()
        "Run `org-agenda-redo' every 2 minutes, if idle."

        (when my-agenda-idle-update-resume-timer
          (cancel-timer my-agenda-idle-update-resume-timer))

        (org-agenda-redo)

        (setq my-agenda-idle-update-resume-timer
              (run-with-idle-timer
               (time-add (current-idle-time) 120)
               nil
               #'my-agenda-idle-update)))

      (run-with-idle-timer 120 t #'my-agenda-idle-update)


      ;; A function of special conscience.
      (defun my-update-all-agenda-views-everywhere ()
        "Update all agenda buffers."
        (org-agenda-redo-all t))


      ;; Update (and schischm?) all agenda views everywhere,
      ;; every 10 minutes.
      (defvar my-agenda-idle-update-all-resume-timer nil
        "Timer for `my-agenda-idle-maybe-update' to reschedule itself, or nil.")

      (defun my-agenda-idle-update-all ()
        "Run `my-update-all-agenda-views-everywhere' every 10 minutes, if idle."

        (when my-agenda-idle-update-all-resume-timer
          (cancel-timer my-agenda-idle-update-all-resume-timer))

        (my-update-all-agenda-views-everywhere)

        (setq my-agenda-idle-update-all-resume-timer
              (run-with-idle-timer
               (time-add (current-idle-time) 600)
               nil
               #'my-agenda-idle-update-all)))

      (run-with-idle-timer 600 t #'my-agenda-idle-update-all)

    #+END_SRC
